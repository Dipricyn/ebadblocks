#!/usr/bin/env bash

exec 3>&1 4>&2

set -eu

DEBUG=false
SESSION_FILE='.ebadblocks'
LAST_BLOCK_RE='Interrupted at block \K\d+'
BADBLOCKS_OPTSTR='b:d:e:fi:o:svwnc:p:h:t:BX'

DEFAULT_BLOCK_SIZE=1024

ERR_USAGE=1

function usage {
  printf "\n"
  cat << EOT
Usage: $0 args
Arguments:
  args        arguments to pass to badblocks
Options:
  --continue  continues from the block at which badblocks was terminated
              The last block is stored in '${SESSION_FILE}'.
EOT
}

if  [ "$#" -lt 1 ]; then
  printf "Missing argument 'mode'!\n"
  usage
  exit "${ERR_USAGE}"
fi

# filter out ebadblocks options
args=("$@")
mode=''
for ((i=0; i<"${#args[@]}"; ++i)); do
  case ${args[i]} in
    --continue)
      unset "args[i]"
      mode='continue'
      break
      ;;
  esac
done

badblocks_args=("${args[@]}")
parsed_badblocks_args=( $( getopt -n "${0##*/}" -o "${BADBLOCKS_OPTSTR}" -- "${badblocks_args[@]}" ) )
eval set -- "${parsed_badblocks_args[*]}"
parsed_badblocks_args=("$@")
block_size="${DEFAULT_BLOCK_SIZE}"
i=0
while (($#)); do
  i=$((i+1))
  # parse badblocks options
  case ${1} in
    -b)
      block_size="$2"
      shift
      ;;
    --)
      separator_idx=$((i))
      ;;
  esac
  shift
done
unset i

set +u
opt_args=("${parsed_badblocks_args[@]:0:$separator_idx}")
pos_args=(${parsed_badblocks_args[@]:$separator_idx+1})
set -u

if ${DEBUG}; then
  printf "badblocks_args:\n${badblocks_args[*]}\n\n"
  printf "parsed_badblocks_args:\n${parsed_badblocks_args[*]}\n\n"
  printf "opt_args:\n${opt_args[*]}\n\n"
  printf "pos_args:\n${pos_args[*]}\n\n"
  printf "separator_idx: $separator_idx\n"
fi

if [ "$mode" = 'continue' ]; then
  if [ -z "${pos_args[0]}" ]; then
    printf "Missing parameter 'device'!\n"
    exit ${ERR_USAGE}
  fi
  device_size=$(blockdev --getsize64 ${pos_args[0]})
  "${DEBUG}" && echo "device size: $device_size"
  # badblock only supports 2**N as block sizes
  block_count=$((device_size/block_size))
  "${DEBUG}" && echo "block count: $block_count"
  last_stopped_block=$(cat "${SESSION_FILE}" 2>/dev/null) || true
  if [ -z "${last_stopped_block}" ]; then
    printf "Couldn't read last stopped block from file '${SESSION_FILE}'!\n"
    exit ${ERR_USAGE}
  fi
  if [ ! -z "${pos_args[2]:-}" ]; then
    printf "Cannot continue when 'first-block' ('${pos_args[2]}') was explicitly specified!\n"
    exit ${ERR_USAGE}
  fi
  if [ -z "${pos_args[1]:-}" ]; then
    # if last-block is not specified: use block_count-1
    pos_args+=($((block_count-1)))
  else
    if (( ${pos_args[1]} < last_stopped_block )); then
      printf "Cannot continue from last stopped block ('$last_stopped_block') with parameter 'last-block' ('${pos_args[1]}')!\n"
      exit ${ERR_USAGE}
    fi
  fi
  pos_args+=($((last_stopped_block)))
fi

"${DEBUG}" && printf "+ badblocks ${opt_args[*]} ${pos_args[*]}\n"
trap '' INT
{ error_out=$( trap INT; badblocks "${opt_args[@]}" "${pos_args[@]}" 2>&1 1>&3 | tee -i /dev/stderr ); } 3>&1
ec=$?
trap INT

last_block=$( grep -oP "${LAST_BLOCK_RE}" <<< "${error_out}" ) || true
if [ -n "${last_block}" ]; then
  printf "$((last_block - 1))" > "${SESSION_FILE}"
else
  rm -f "${SESSION_FILE}"
fi

exit $ec